name: 'Terraform'

on:
  push:
    branches:
      - main

env:
  AWS_REGION: 'ap-northeast-2'
  WORKING_DIR: './terraform'
  EC2_INSTANCE_NAME: 'kakao-friend-list-server-2'
  EC2_KEY_PAIR_NAME: 'terraform_key_pair'
  SECURITY_GROUP_NAME: 'my-server-sg'
  SECURITY_GROUP_ID: ''
  VPC_TAG_NAME: 'my-vpc'
  VPC_ID: ''
  VPC_SUBNET_TAG_NAME: 'my-subnet'
  EC2_I_AM_ROLE_NAME: 'ec2-code-deploy-role-2'

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    # environment: production

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check for existing EC2 instance
        id: check-instance
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=${{ env.EC2_INSTANCE_NAME }}" --query "Reservations[*].Instances[*].InstanceId" --output text)
          echo "INSTANCE_EXISTS=${INSTANCE_ID}" >> $GITHUB_OUTPUT

      - name: Check EC2 Key Pair Existence
        id: check_key
        run: |
          if aws ec2 describe-key-pairs --key-names "${{ env.EC2_KEY_PAIR_NAME }}" >/dev/null 2>&1; then
            echo "Key pair exists."
            echo "KEY_PAIR_EXISTS=true" >> $GITHUB_OUTPUT
          else
            echo "Key pair does not exist."
            echo "KEY_PAIR_EXISTS=false" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Init
        if: steps.check_key.outputs.KEY_PAIR_EXISTS == 'false'
        run: terraform init
        working-directory: ${{ env.WORKING_DIR }}/key_pair

      - name: Terraform Validate
        if: steps.check_key.outputs.KEY_PAIR_EXISTS == 'false'
        run: terraform validate -no-color
        working-directory: ${{ env.WORKING_DIR }}/key_pair

      - name: Terraform Plan
        if: steps.check_key.outputs.KEY_PAIR_EXISTS == 'false'
        run: terraform plan -no-color -var="key_pair_name=${{ env.EC2_KEY_PAIR_NAME }}"
        working-directory: ${{ env.WORKING_DIR }}/key_pair

      - name: Terraform Apply
        if: steps.check_key.outputs.KEY_PAIR_EXISTS == 'false'
        run: terraform apply -auto-approve -var="key_pair_name=${{ env.EC2_KEY_PAIR_NAME }}"
        working-directory: ${{ env.WORKING_DIR }}/key_pair

      - name: Get Security VPC ID
        run: |
          VPC_ID=$(aws ec2 describe-vpcs --filters "Name=tag:Name,Values=${{ env.VPC_TAG_NAME }}" --query 'Vpcs[0].VpcId' --output text)
          if [ "$VPC_ID" == "None" ]; then
            VPC_ID=""
          fi
          echo "VPC_ID=$VPC_ID" >> $GITHUB_ENV

      - name: Terraform Init
        if: env.VPC_ID == ''
        run: terraform init
        working-directory: ${{ env.WORKING_DIR }}/vpc

      - name: Terraform Validate
        if: env.VPC_ID == ''
        run: terraform validate -no-color
        working-directory: ${{ env.WORKING_DIR }}/vpc

      - name: Terraform Plan
        if: env.VPC_ID == ''
        run: terraform plan -no-color -var="vpc_tag_name=${{ env.VPC_TAG_NAME }}" -var="subnet_tag_name=${{ env.VPC_SUBNET_TAG_NAME }}"
        working-directory: ${{ env.WORKING_DIR }}/vpc

      - name: Terraform Apply
        if: env.VPC_ID == ''
        run: terraform apply -auto-approve -var="vpc_tag_name=${{ env.VPC_TAG_NAME }}" -var="subnet_tag_name=${{ env.VPC_SUBNET_TAG_NAME }}"
        working-directory: ${{ env.WORKING_DIR }}/vpc

      - name: Get Security VPC ID
        if: env.VPC_ID == ''
        run: |
          VPC_ID=$(aws ec2 describe-vpcs --filters "Name=tag:Name,Values=${{ env.VPC_TAG_NAME }}" --query 'Vpcs[0].VpcId' --output text)
          if [ "$VPC_ID" == "None" ]; then
            VPC_ID=""
          fi
          echo "VPC_ID=$VPC_ID" >> $GITHUB_ENV

      - name: Get Security Group ID
        run: |
          SG_ID=$(aws ec2 describe-security-groups --query "SecurityGroups[?GroupName=='${{ env.SECURITY_GROUP_NAME }}'].GroupId" --output text)
          echo SECURITY_GROUP_ID=$SG_ID >> $GITHUB_ENV

      - name: Terraform Init
        if: env.SECURITY_GROUP_ID == ''
        run: terraform init
        working-directory: ${{ env.WORKING_DIR }}/security_group

      - name: Terraform Validate
        if: env.SECURITY_GROUP_ID == ''
        run: terraform validate -no-color
        working-directory: ${{ env.WORKING_DIR }}/security_group

      - name: Terraform Plan
        if: env.SECURITY_GROUP_ID == ''
        run: terraform plan -no-color -var="security_group_name=${{ env.SECURITY_GROUP_NAME }}" -var="security_vpc_id=${{ env.VPC_ID }}"
        working-directory: ${{ env.WORKING_DIR }}/security_group

      - name: Terraform Apply
        if: env.SECURITY_GROUP_ID == ''
        run: terraform apply -auto-approve -var="security_group_name=${{ env.SECURITY_GROUP_NAME }}" -var="security_vpc_id=${{ env.VPC_ID }}"
        working-directory: ${{ env.WORKING_DIR }}/security_group

      - name: Get Created Security Group ID
        if: env.SECURITY_GROUP_ID == ''
        run: |
          SG_ID=$(aws ec2 describe-security-groups --query "SecurityGroups[?GroupName=='${{ env.SECURITY_GROUP_NAME }}'].GroupId" --output text)
          echo SECURITY_GROUP_ID=$SG_ID >> $GITHUB_ENV
      
      - name: Check EC2 IAM Role Existence
        id: check_iam_role
        run: |
          ROLE_EXISTS=$(aws iam get-role --role-name "${{ env.EC2_I_AM_ROLE_NAME }}" 2>&1 || echo "not found")
          if [[ "$ROLE_EXISTS" == *"not found"* ]]; then
            echo "IAM_ROLE_EXISTS=false" >> $GITHUB_OUTPUT
          else
            echo "IAM_ROLE_EXISTS=true" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Init for IAM Role
        if: steps.check_iam_role.outputs.IAM_ROLE_EXISTS == 'false'
        run: terraform init
        working-directory: ${{ env.WORKING_DIR }}/iam_role

      - name: Terraform Validate for IAM Role
        if: steps.check_iam_role.outputs.IAM_ROLE_EXISTS == 'false'
        run: terraform validate -no-color
        working-directory: ${{ env.WORKING_DIR }}/iam_role

      - name: Terraform Plan for IAM Role
        if: steps.check_iam_role.outputs.IAM_ROLE_EXISTS == 'false'
        run: terraform plan -no-color -var="role_name=${{ env.EC2_I_AM_ROLE_NAME }}"
        working-directory: ${{ env.WORKING_DIR }}/iam_role

      - name: Terraform Apply for IAM Role
        if: steps.check_iam_role.outputs.IAM_ROLE_EXISTS == 'false'
        run: terraform apply -auto-approve -var="role_name=${{ env.EC2_I_AM_ROLE_NAME }}"
        working-directory: ${{ env.WORKING_DIR }}/iam_role

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        if: steps.check-instance.outputs.INSTANCE_EXISTS == ''
        run: terraform init
        working-directory: ${{ env.WORKING_DIR }}/ec2

      - name: Terraform Validate
        if: steps.check-instance.outputs.INSTANCE_EXISTS == ''
        run: terraform validate -no-color
        working-directory: ${{ env.WORKING_DIR }}/ec2

      - name: Terraform Plan
        if: steps.check-instance.outputs.INSTANCE_EXISTS == ''
        run: terraform plan -no-color -var="ec2_instance_name=${{ env.EC2_INSTANCE_NAME }}" -var="key_pair_name=${{ env.EC2_KEY_PAIR_NAME }}" -var="security_group_id=${{ env.SECURITY_GROUP_ID }}" -var="i_am_role_name=${{ env.EC2_I_AM_ROLE_NAME }}"
        working-directory: ${{ env.WORKING_DIR }}/ec2

      - name: Terraform Apply
        if: steps.check-instance.outputs.INSTANCE_EXISTS == ''
        run: terraform apply -auto-approve -no-color -var="ec2_instance_name=${{ env.EC2_INSTANCE_NAME }}" -var="key_pair_name=${{ env.EC2_KEY_PAIR_NAME }}" -var="security_group_id=${{ env.SECURITY_GROUP_ID }}" -var="i_am_role_name=${{ env.EC2_I_AM_ROLE_NAME }}"
        working-directory: ${{ env.WORKING_DIR }}/ec2
